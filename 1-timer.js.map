{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startBtn = document.querySelector('[data-start]');\nconst input = document.querySelector('#datetime-picker');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet timerId = null;\nlet userSelectedDate = null;\n\nstartBtn.disabled = true;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const selectedDate = selectedDates[0];\n        if (selectedDate <= new Date()) {\n        iziToast.warning({\n            message: \"Please choose a date in the future\",\n            position: \"topRight\"\n        });\n        startBtn.disabled = true;\n    } else {\n        userSelectedDate = selectedDate;\n        startBtn.disabled = false;\n    }\n    }\n};\n\nflatpickr(input, options); \n\nstartBtn.addEventListener('click', () => {\n    if (!userSelectedDate) return;\n  \n    startBtn.disabled = true;\n    input.disabled = true;\n  \n    timerId = setInterval(() => {\n      const diff = userSelectedDate - new Date();\n      if (diff <= 0) {\n        clearInterval(timerId);\n        updateTimer(0);\n        input.disabled = false;\n        return;\n      }\n      updateTimer(diff);\n    }, 1000);\n  });\n  \n  function updateTimer(ms) {\n    const { days, hours, minutes, seconds } = convertMs(ms);\n    daysSpan.textContent = addLeadingZero(days);\n    hoursSpan.textContent = addLeadingZero(hours);\n    minutesSpan.textContent = addLeadingZero(minutes);\n    secondsSpan.textContent = addLeadingZero(seconds);\n  }\n  \n  function convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n  function addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\n"],"names":["startBtn","input","daysSpan","hoursSpan","minutesSpan","secondsSpan","timerId","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","diff","updateTimer","ms","days","hours","minutes","seconds","convertMs","addLeadingZero","value"],"mappings":"+IAMA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAU,KACVC,EAAmB,KAEvBP,EAAS,SAAW,GAEpB,MAAMQ,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACxBC,EAAS,QAAQ,CACb,QAAS,qCACT,SAAU,UACtB,CAAS,EACDX,EAAS,SAAW,KAEpBO,EAAmBG,EACnBV,EAAS,SAAW,GAEvB,CACL,EAEAY,EAAUX,EAAOO,CAAO,EAExBR,EAAS,iBAAiB,QAAS,IAAM,CAChCO,IAELP,EAAS,SAAW,GACpBC,EAAM,SAAW,GAEjBK,EAAU,YAAY,IAAM,CAC1B,MAAMO,EAAON,EAAmB,IAAI,KACpC,GAAIM,GAAQ,EAAG,CACb,cAAcP,CAAO,EACrBQ,EAAY,CAAC,EACbb,EAAM,SAAW,GACjB,MACD,CACDa,EAAYD,CAAI,CACjB,EAAE,GAAI,EACX,CAAG,EAED,SAASC,EAAYC,EAAI,CACvB,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAE,EACtDb,EAAS,YAAcmB,EAAeL,CAAI,EAC1Cb,EAAU,YAAckB,EAAeJ,CAAK,EAC5Cb,EAAY,YAAciB,EAAeH,CAAO,EAChDb,EAAY,YAAcgB,EAAeF,CAAO,CACjD,CAED,SAASC,EAAUL,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}